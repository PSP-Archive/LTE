.TH "engine::ITimer" 3 "29 Jul 2006" "LTE 3D Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
engine::ITimer \- Interface for getting and manipulating the virtual time.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <ITimer.h>\fP
.PP
Inherits \fBengine::IUnknown\fP.
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fB~ITimer\fP ()"
.br
.RI "\fIdestructor \fP"
.ti -1c
.RI "virtual u32 \fBgetRealTime\fP ()=0"
.br
.RI "\fIReturns current real time in milliseconds of the system. \fP"
.ti -1c
.RI "virtual u32 \fBgetTime\fP ()=0"
.br
.RI "\fIReturns current virtual time in milliseconds. \fP"
.ti -1c
.RI "virtual void \fBsetTime\fP (u32 time)=0"
.br
.RI "\fIsets current virtual time \fP"
.ti -1c
.RI "virtual void \fBstop\fP ()=0"
.br
.RI "\fIStops the virtual timer. \fP"
.ti -1c
.RI "virtual void \fBstart\fP ()=0"
.br
.RI "\fIStarts the virtual timer. \fP"
.ti -1c
.RI "virtual void \fBsetSpeed\fP (f32 speed=1.0f)=0"
.br
.RI "\fISets the speed of the timer. \fP"
.ti -1c
.RI "virtual f32 \fBgetSpeed\fP ()=0"
.br
.RI "\fIReturns current speed of the timer. \fP"
.ti -1c
.RI "virtual bool \fBisStopped\fP ()=0"
.br
.RI "\fIReturns if the virtual timer is currently stopped. \fP"
.ti -1c
.RI "virtual void \fBtick\fP ()=0"
.br
.RI "\fIAdvances the virtual time. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Interface for getting and manipulating the virtual time. 
.PP
.SH "Member Function Documentation"
.PP 
.SS "virtual u32 engine::ITimer::getRealTime ()\fC [pure virtual]\fP"
.PP
Returns current real time in milliseconds of the system. 
.PP
This value does not start with 0 when the application starts. For example in one implementation the value returned could be the amount of milliseconds which have elapsed since the system was started. 
.SS "virtual f32 engine::ITimer::getSpeed ()\fC [pure virtual]\fP"
.PP
Returns current speed of the timer. 
.PP
The speed is the factor with which the time is running faster or slower then the real system time. 
.SS "virtual u32 engine::ITimer::getTime ()\fC [pure virtual]\fP"
.PP
Returns current virtual time in milliseconds. 
.PP
This value starts with 0 and can be manipulated using \fBsetTime()\fP, stopTimer(), startTimer(), etc. This value depends on the set speed of the timer if the timer is stopped, etc. If you need the system time, use \fBgetRealTime()\fP 
.SS "virtual void engine::ITimer::setSpeed (f32 speed = \fC1.0f\fP)\fC [pure virtual]\fP"
.PP
Sets the speed of the timer. 
.PP
The speed is the factor with which the time is running faster or slower then the real system time. 
.SS "virtual void engine::ITimer::start ()\fC [pure virtual]\fP"
.PP
Starts the virtual timer. 
.PP
The timer is reference counted, which means everything which calls \fBstop()\fP will also have to call \fBstart()\fP, otherwise the timer may not start/stop corretly again. 
.SS "virtual void engine::ITimer::stop ()\fC [pure virtual]\fP"
.PP
Stops the virtual timer. 
.PP
The timer is reference counted, which means everything which calls \fBstop()\fP will also have to call \fBstart()\fP, otherwise the timer may not start/stop corretly again. 
.SS "virtual void engine::ITimer::tick ()\fC [pure virtual]\fP"
.PP
Advances the virtual time. 
.PP
Makes the virtual timer update the time value based on the real time. This is called automaticly when calling engineDevice::run(), but you can call it manually if you don't use this method. 

.SH "Author"
.PP 
Generated automatically by Doxygen for LTE 3D Engine from the source code.
