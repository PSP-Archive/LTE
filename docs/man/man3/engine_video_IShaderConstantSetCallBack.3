.TH "engine::video::IShaderConstantSetCallBack" 3 "29 Jul 2006" "LTE 3D Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
engine::video::IShaderConstantSetCallBack \- Interface making it possible to set constants for gpu programs every frame.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <IShaderConstantSetCallBack.h>\fP
.PP
Inherits \fBengine::IUnknown\fP.
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fB~IShaderConstantSetCallBack\fP ()"
.br
.RI "\fIDestructor. \fP"
.ti -1c
.RI "virtual void \fBOnSetConstants\fP (\fBIMaterialRendererServices\fP *services, s32 userData)=0"
.br
.RI "\fICalled by the engine when the vertex and/or pixel shader constants for an material renderer should be set. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Interface making it possible to set constants for gpu programs every frame. 
.PP
.SH "Member Function Documentation"
.PP 
.SS "virtual void engine::video::IShaderConstantSetCallBack::OnSetConstants (\fBIMaterialRendererServices\fP * services, s32 userData)\fC [pure virtual]\fP"
.PP
Called by the engine when the vertex and/or pixel shader constants for an material renderer should be set. 
.PP
Implement the \fBIShaderConstantSetCallBack\fP in an own class and implement your own OnSetConstants method using the given \fBIMaterialRendererServices\fP interface. Pass a pointer to this class to one of the methods in \fBIGPUProgrammingServices\fP when creating a shader. The OnSetConstants method will now be called every time before geometry is being drawn using your shader material. A sample implementation would look like this: 
.PP
.nf
         virtual void OnSetConstants(video::IMaterialRendererServices* services, s32 userData)
         {
           video::IVideoDriver* driver = services->getVideoDriver();
        
           // set clip matrix at register 4
           core::matrix4 worldViewProj;
           worldViewProj = driver->getTransform(video::ETS_PROJECTION);                 
           worldViewProj *= driver->getTransform(video::ETS_VIEW);
           worldViewProj *= driver->getTransform(video::ETS_WORLD);
           services->setVertexShaderConstant(&worldViewProj.M[0], 4, 4);
           // for high level shading languages, this would be another solution:
           //services->setVertexShaderConstant('mWorldViewProj', worldViewProj.M, 16);
           
           // set some light color at register 9
           video::SColorf col(0.0f,1.0f,1.0f,0.0f);
           services->setVertexShaderConstant(reinterpret_cast<f32*>(&col), 9, 1);
           // for high level shading languages, this would be another solution:
           //services->setVertexShaderConstant('myColor', reinterpret_cast<f32*>(&col), 4);
         }

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIservices,:\fP Pointer to an interface providing methods to set the constants for the shader. 
.br
\fIuserData,:\fP Userdata int which can be specified when creating the shader. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for LTE 3D Engine from the source code.
